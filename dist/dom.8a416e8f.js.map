{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","console","log","nextSibling","parentNode","insertBefore","before","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.8a416e8f.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    create(string) {\r\n        const container = document.createElement(\"template\")\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild\r\n    },\r\n    after(node, node2) {\r\n        console.log(node.nextSibling)\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    append(parent, node) {\r\n        parent.appendChild(node);\r\n    },\r\n    wrap(node, parent) {\r\n        dom.before(node, parent);\r\n        dom.append(parent, node);\r\n    },\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    },\r\n    empty(node) {\r\n        const { childNodes } = node\r\n        //直接从node获取到它的childNodes，等价于const childNods = node.childNodes\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n    attr(node, name, value) {   //重载\r\n\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    text(node, string) {       //适配\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {          //ie\r\n                node.innerText = string\r\n            } else {                            //FireFox/Chrome\r\n                node.textContent = string\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText\r\n            } else {\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            // dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                // dom.style(div,'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]     //key是个变量\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class: {   //class是个对象\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children).filter(n => n !== node)\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n\r\n};\r\n"]}